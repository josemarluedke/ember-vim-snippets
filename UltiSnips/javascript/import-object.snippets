snippet imaction "Action Decorator"
import { action } from '@ember/object';
endsnippet

snippet imobject "Ember.Object"
import EmberObject from '@ember/object';
endsnippet

snippet imobjectProxy "Ember.ObjectProxy"
import ObjectProxy from '@ember/object/proxy';
endsnippet

snippet imobservable "Ember.Observable"
import Observable from '@ember/object/observable';
endsnippet

snippet imaddListener "Ember.addListener"
import { addListener } from '@ember/object/events';
endsnippet

snippet imaddObserver "Ember.addObserver"
import { addObserver } from '@ember/object/observers';
endsnippet

snippet imaliasMethod "Ember.aliasMethod"
import { aliasMethod } from '@ember/object';
endsnippet

snippet imcomputed "Ember.computed"
import { computed } from '@ember/object';
endsnippet

snippet imalias "Ember.computed.alias"
import { alias } from '@ember/object/computed';
endsnippet

snippet imand "Ember.computed.and"
import { and } from '@ember/object/computed';
endsnippet

snippet imbool "Ember.computed.bool"
import { bool } from '@ember/object/computed';
endsnippet

snippet imcollect "Ember.computed.collect"
import { collect } from '@ember/object/computed';
endsnippet

snippet imdeprecatingAlias "Ember.computed.deprecatingAlias"
import { deprecatingAlias } from '@ember/object/computed';
endsnippet

snippet imempty "Ember.computed.empty"
import { empty } from '@ember/object/computed';
endsnippet

snippet imequal "Ember.computed.equal"
import { equal } from '@ember/object/computed';
endsnippet

snippet imfilter "Ember.computed.filter"
import { filter } from '@ember/object/computed';
endsnippet

snippet imfilterBy "Ember.computed.filterBy"
import { filterBy } from '@ember/object/computed';
endsnippet

snippet imfilterProperty "Ember.computed.filterProperty"
import { filterProperty } from '@ember/object/computed';
endsnippet

snippet imgt "Ember.computed.gt"
import { gt } from '@ember/object/computed';
endsnippet

snippet imgte "Ember.computed.gte"
import { gte } from '@ember/object/computed';
endsnippet

snippet imintersect "Ember.computed.intersect"
import { intersect } from '@ember/object/computed';
endsnippet

snippet imlt "Ember.computed.lt"
import { lt } from '@ember/object/computed';
endsnippet

snippet imlte "Ember.computed.lte"
import { lte } from '@ember/object/computed';
endsnippet

snippet immap "Ember.computed.map"
import { map } from '@ember/object/computed';
endsnippet

snippet immapBy "Ember.computed.mapBy"
import { mapBy } from '@ember/object/computed';
endsnippet

snippet immapProperty "Ember.computed.mapProperty"
import { mapProperty } from '@ember/object/computed';
endsnippet

snippet immatch "Ember.computed.match"
import { match } from '@ember/object/computed';
endsnippet

snippet immax "Ember.computed.max"
import { max } from '@ember/object/computed';
endsnippet

snippet immin "Ember.computed.min"
import { min } from '@ember/object/computed';
endsnippet

snippet imnone "Ember.computed.none"
import { none } from '@ember/object/computed';
endsnippet

snippet imnot "Ember.computed.not"
import { not } from '@ember/object/computed';
endsnippet

snippet imnotEmpty "Ember.computed.notEmpty"
import { notEmpty } from '@ember/object/computed';
endsnippet

snippet imoneWay "Ember.computed.oneWay"
import { oneWay } from '@ember/object/computed';
endsnippet

snippet imor "Ember.computed.or"
import { or } from '@ember/object/computed';
endsnippet

snippet imreadOnly "Ember.computed.readOnly"
import { readOnly } from '@ember/object/computed';
endsnippet

snippet imreads "Ember.computed.reads"
import { reads } from '@ember/object/computed';
endsnippet

snippet imsetDiff "Ember.computed.setDiff"
import { setDiff } from '@ember/object/computed';
endsnippet

snippet imsort "Ember.computed.sort"
import { sort } from '@ember/object/computed';
endsnippet

snippet imsum "Ember.computed.sum"
import { sum } from '@ember/object/computed';
endsnippet

snippet imunion "Ember.computed.union"
import { union } from '@ember/object/computed';
endsnippet

snippet imuniq "Ember.computed.uniq"
import { uniq } from '@ember/object/computed';
endsnippet

snippet imuniqBy "Ember.computed.uniqBy"
import { uniqBy } from '@ember/object/computed';
endsnippet

snippet imcopy "Ember.copy"
import { copy } from '@ember/object/internals';
endsnippet

snippet impolyfillCreate "Ember.create"
import { create } from '@ember/polyfills';
endsnippet

snippet imobjecDefineProperty "Ember.defineProperty"
import { defineProperty } from '@ember/object';
endsnippet

snippet imget "Ember.get"
import { get } from '@ember/object';
endsnippet

snippet imgetProperties "Ember.getProperties"
import { getProperties } from '@ember/object';
endsnippet

snippet imgetWithDefault "Ember.getWithDefault"
import { getWithDefault } from '@ember/object';
endsnippet

snippet imguidFor "Ember.guidFor"
import { guidFor } from '@ember/object/internals';
endsnippet

snippet imobserver "Ember.observer"
import { observer } from '@ember/object';
endsnippet

snippet imon "Ember.on"
import { on } from '@ember/object/evented';
endsnippet

snippet imremoveListener "Ember.removeListener"
import { removeListener } from '@ember/object/events';
endsnippet

snippet imremoveObserver "Ember.removeObserver"
import { removeObserver } from '@ember/object/observers';
endsnippet

snippet imsendEvent "Ember.sendEvent"
import { sendEvent } from '@ember/object/events';
endsnippet

snippet imset "Ember.set"
import { set } from '@ember/object';
endsnippet

snippet imsetProperties "Ember.setProperties"
import { setProperties } from '@ember/object';
endsnippet

snippet imtrySet "Ember.trySet"
import { trySet } from '@ember/object';
endsnippet

snippet imcomputedProperty "Ember.ComputedProperty"
import ComputedProperty from '@ember/object/computed';
endsnippet

snippet imcoreObject "Ember.CoreObject"
import CoreObject from '@ember/object/core';
endsnippet

snippet imevented "Ember.Evented"
import Evented from '@ember/object/evented';
endsnippet

snippet immixin "Ember.Mixin"
import Mixin from '@ember/object/mixin';
endsnippet

snippet impromiseProxyMixin "Ember.PromiseProxyMixin"
import PromiseProxyMixin from '@ember/object/promise-proxy-mixin';
endsnippet

snippet imcacheFor "Ember.cacheFor"
import { cacheFor } from '@ember/object/internals';
endsnippet

