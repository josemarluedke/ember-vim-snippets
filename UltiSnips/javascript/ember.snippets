snippet run "run(() => { ... }): Ember"
run(() => {,	${1},});
endsnippet

snippet lget "let ... get(...): Ember"
let $1 = ${2:this}.get('$1');
endsnippet

snippet set ".set(...): Ember"
${1:this}.set('${2}', ${3});
endsnippet

snippet get ".get(...): Ember"
${1:this}.get('${2}');
endsnippet

snippet set "this._super(...): Ember"
this._super(...arguments);
endsnippet

snippet init "init() { ... }: Ember"
init() {,	this._super(...arguments);,	${1},},
endsnippet

snippet service "service(...): Ember"
service(${1}),
endsnippet

snippet observer "observer(...): Ember"
observer('${1:property}', function() {,	${2:// body},}),
endsnippet

snippet on "on(...): Ember"
on('${1:property}', function() {,	${2:// body},}),
endsnippet

snippet actions "actions: { ... }: Ember"
actions: {,	${1:// body},},
endsnippet

snippet computed "computed(...): Ember"
computed('${1:property}', function() {,	${2:// body},}),
endsnippet

snippet calias "alias(...): Ember Computed"
alias('${1:key}')
endsnippet

snippet cand "and(...): Ember Computed"
and('${1:key1}', '${2:key2}')
endsnippet

snippet cbool "bool(...): Ember Computed"
bool(${1:key})
endsnippet

snippet ccollect "collect(...): Ember Computed"
collect(${1:keys})
endsnippet

snippet cempty "empty(...): Ember Computed"
empty('${1:key}')
endsnippet

snippet cequal "equal(...): Ember Computed"
equal('${1:key}', ${2:value});
endsnippet

snippet cfilter "filter(...): Ember Computed"
filter(${1:key}, function(${2:item}${3:, index}) {,	return ${2:item};,}));
endsnippet

snippet cfilterBy "filterBy(...): Ember Computed"
filterBy('${1:key}', ${2:propertyKey}, ${3:value});
endsnippet

snippet cgt "gt(...): Ember Computed"
gt('${1:key}', ${2:value});
endsnippet

snippet cgte "gte(...): Ember Computed"
gte('${1:key}', ${2:value});
endsnippet

snippet intersect "intersect(...): Ember Computed"
intersect(${1})
endsnippet

snippet clt "lt(...): Ember Computed"
lt('${1:key}', ${2:value});
endsnippet

snippet clte "lte(...): Ember Computed"
lte('${1:key}', ${2:value});
endsnippet

snippet cmap "map(...): Ember Computed"
map(${1:key}, function(${2:item}${3:, index}) {,	return ${2:item};,}));
endsnippet

snippet cmapBy "mapBy(...): Ember Computed"
mapBy('${1:key}', '${2:propertyKey}');
endsnippet

snippet cmatch "match(...): Ember Computed"
match('${1:key}', ${2:regEx});
endsnippet

snippet cmax "max(...): Ember Computed"
max('${1:key}');
endsnippet

snippet cmin "min(...): Ember Computed"
min('${1:key}');
endsnippet

snippet cnone "none(...): Ember Computed"
none('${1:key}');
endsnippet

snippet cnot "not(...): Ember Computed"
not('${1:key}');
endsnippet

snippet cnotEmpty "notEmpty(...): Ember Computed"
notEmpty('${1:key}');
endsnippet

snippet coneWay "oneWay(...): Ember Computed"
oneWay('${1:key}');
endsnippet

snippet cor "or(...): Ember Computed"
or('${1:key1}', '${2:key2}');
endsnippet

snippet creadOnly "readOnly(...): Ember Computed"
readOnly('${1:key}');
endsnippet

snippet creads "reads(...): Ember Computed"
reads('${1:key}');
endsnippet

snippet csetDiff "setDiff(...): Ember Computed"
setDiff('${1:key1}', '${2:key2}');
endsnippet

snippet csort "sort(...): Ember Computed"
sort('${1:itemsKey}', '${2:sortDefinition}');
endsnippet

snippet csum "sum(...): Ember Computed"
sum('${1:key}');
endsnippet

snippet cunion "union(...): Ember Computed"
union('${1:key1}', '${2:key2}');
endsnippet

snippet cuniq "uniq(...): Ember Computed"
uniq('${1:key}', '${2:propertyKey}');
endsnippet

snippet cuniqBy "uniqBy(...): Ember Computed"
uniqBy('${1:key}');
endsnippet

snippet bind "bind(...): Ember"
bind(${1:this}, ${2:this.methodName});
endsnippet

snippet cancel "cancel(...): Ember"
cancel('${1:key}');
endsnippet

snippet debounce "debounce(...): Ember"
debounce(${1:this}, '${2:methodName}', ${3:500});
endsnippet

snippet later "later(...): Ember"
later(${1:this}, () => { ${2}\}, ${3:500});
endsnippet

snippet next "next(...): Ember"
next(${1:this}, () => { ${2}\});
endsnippet

snippet once "once(...): Ember"
once(${1:this}, () => { ${2}\});
endsnippet

snippet run "run(...): Ember"
run(() => { ${1}\});
endsnippet

snippet schedule "schedule(...): Ember"
schedule('${1:queue}', ${2:this}, () => { ${3}\}, );
endsnippet

snippet scheduleOnce "scheduleOnce(...): Ember"
scheduleOnce('${1:queue}', ${2:this}, () => { ${3}\}, );
endsnippet

snippet throttle "throttle(...): Ember"
throttle(${1:this}, '${2:methodName}', ${3:500});
endsnippet

snippet model "Route: model(...) { ... }: Ember"
model(params = {}) {,	return this.store.query('${1}', params);,},
endsnippet

snippet setupController "setupController(...) { ... }: Ember"
setupController(controller, model) {,	this._super(controller, model);,	${1},},
endsnippet

snippet beforeModel "Route: beforeModel(...) { ... }: Ember"
beforeModel(transition) {,	this._super(controller, model);,	${1},},
endsnippet

snippet afterModel "Route: afterModel(...) { ... }: Ember"
afterModel(model, transition) {,	this._super(controller, model);,	${1},},
endsnippet

snippet didReceiveAttrs "Component: didReceiveAttrs() { ... }: Ember"
didReceiveAttrs() {,	this._super(...arguments);,	${1},},
endsnippet

snippet didRender "Component: didRender() { ... }: Ember"
didRender() {,	this._super(...arguments);,	${1},},
endsnippet

snippet didUpdateAttrs "Component: didUpdateAttrs() { ... }: Ember"
didUpdateAttrs() {,	this._super(...arguments);,	${1},},
endsnippet

snippet willUpdate "Component: willUpdate() { ... }: Ember"
willUpdate() {,	this._super(...arguments);,	${1},},
endsnippet

snippet didInsertElement "Component: didInsertElement() { ... }: Ember"
didInsertElement() {,	this._super(...arguments);,	${1},},
endsnippet

snippet willDestroyElement "Component: willDestroyElement() { ... }: Ember"
willDestroyElement() {,	this._super(...arguments);,	${1},},
endsnippet

snippet willClearElement "Component: willClearElement() { ... }: Ember"
willClearElement() {,	this._super(...arguments);,	${1},},
endsnippet

snippet didDestroyElement "Component: didDestroyElement() { ... }: Ember"
didDestroyElement() {,	this._super(...arguments);,	${1},},
endsnippet

snippet filterBy ".filterBy(...): Ember Enumerable"
${1:enumerable}.filterBy('${2:property}', ${3:value});
endsnippet

snippet mapBy ".mapBy(...): Ember Enumerable"
${1:enumerable}.mapBy('${2:property}');
endsnippet

snippet every ".every(...): Ember Enumerable"
${1:enumerable}.every(function(${2:item}) {,	${3},});
endsnippet

snippet is-every ".isEvery(...): Ember Enumerable"
${1:enumerable}.isEvery('${2:property}', ${3:bool});
endsnippet

snippet some ".some(...): Ember Enumerable"
${1:enumerable}.some(function(${2:item}) {,	${3},});
endsnippet

snippet is-any ".isAny(...): Ember Enumerable"
${1:enumerable}.isAny('${2:property}', ${3:bool});
endsnippet

snippet to-array ".toArray(...): Ember Enumerable"
${1:enumerable}.toArray();
endsnippet

snippet first-object ".get('firstObject'): Ember Enumerable"
${1:enumerable}.get('firstObject');
endsnippet

snippet last-object ".get('lastObject'): Ember Enumerable"
${1:enumerable}.get('lastObject');
endsnippet

