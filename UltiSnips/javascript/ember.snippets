snippet run "run(() => { ... })"
run((${1}) => {
	${2}
});
endsnippet

snippet lget "let ... get(...)"
let $1 = ${2:this}.get('$1');
endsnippet

snippet set ".set(...)"
${1:this}.set('${2}', ${3});
endsnippet

snippet get ".get(...)"
${1:this}.get('${2}');
endsnippet

snippet super "super.name(...)"
super.${1}(${2:...arguments});
endsnippet

snippet init "init() { ... }"
init() {
	this._super(...arguments);

	${1}
}
endsnippet

snippet constructor "constructor(owner, args)"
constructor(owner, args) {
	super(owner, args);

	${1:// body}
}
endsnippet

snippet service "@service name"
@service ${1};
endsnippet

snippet observer "observer(...)"
observer('${1:property}', function() {
	${2:// body}
}),
endsnippet

snippet on "on(...)"
on('${1:property}', function() {
	${2:// body}
}),
endsnippet

snippet actions "actions: { ... }"
actions: {
	${1:// body}
},
endsnippet

snippet computed "@computed(...)"
@computed('${1:propertyKey}')
get ${2:property}() {
	${3:// body}
}
endsnippet

snippet tracked "@tracked name"
@tracked ${1:name} = ${2:value};
endsnippet

snippet calias "@alias(...)"
@alias('${1:key}') ${2:value};
endsnippet

snippet cand "@and(...)"
@and('${1:key1}', '${2:key2}') ${3:value};
endsnippet

snippet cbool "@bool(...)"
@bool(${1:key}) ${2:value};
endsnippet

snippet ccollect "@collect(...)"
@collect(${1:keys}) ${2:value};
endsnippet

snippet cempty "@empty(...)"
@empty('${1:key}') ${2:value};
endsnippet

snippet cequal "@equal(...)"
@equal('${1:key}', ${2:value}) ${3:name};
endsnippet

snippet cfilter "@filter(...)"
@filter (${1:key}, function(${2:item}${3:, index}${4:, array}) {
	return ${2:item};
})
${5:name};
endsnippet

snippet cfilterBy "@filterBy(...)"
@filterBy ('${1:key}', ${2:propertyKey}, ${3:value}) ${4:name};
endsnippet

snippet cgt "@gt(...)"
@gt('${1:key}', ${2:value}) ${3:name};
endsnippet

snippet cgte "@gte(...)"
@gte('${1:key}', ${2:value}) ${3:name};
endsnippet

snippet intersect "@intersect(...)"
@intersect(${1}) ${2:name};
endsnippet

snippet clt "@lt(...)"
@lt('${1:key}', ${2:value}) ${3:name};
endsnippet

snippet clte "@lte(...)"
@lte('${1:key}', ${2:value}) ${3:name};
endsnippet

snippet cmap "@map(...)"
@map(${1:key}, function(${2:item}${3:, index}) {
	return ${2:item};
}) ${4:name};
endsnippet

snippet cmapBy "@mapBy(...)"
@mapBy('${1:key}', '${2:propertyKey}') ${3:name};
endsnippet

snippet cmatch "@match(...)"
@match('${1:key}', ${2:regEx}) ${3:name};
endsnippet

snippet cmax "@max(...)"
@max('${1:key}') ${2:name};
endsnippet

snippet cmin "@min(...)"
@min('${1:key}') ${2:name};
endsnippet

snippet cnone "@none(...)"
@none('${1:key}') ${2:name};
endsnippet

snippet cnot "@not(...)"
@not('${1:key}') ${2:name};
endsnippet

snippet cnotEmpty "@notEmpty(...)"
@notEmpty('${1:key}') ${2:name};
endsnippet

snippet coneWay "@oneWay(...)"
@oneWay('${1:key}') ${2:name};
endsnippet

snippet cor "@or(...)"
@or('${1:key1}', '${2:key2}') ${3:name};
endsnippet

snippet creadOnly "@readOnly(...)"
@readOnly('${1:key}') ${2:name};
endsnippet

snippet creads "@reads(...)"
@reads('${1:key}') ${2:name};
endsnippet

snippet csetDiff "@setDiff(...)"
@setDiff('${1:key1}', '${2:key2}') ${3:name};
endsnippet

snippet csort "@sort(...)"
@sort('${1:itemsKey}', '${2:sortDefinition}') ${3:name};
endsnippet

snippet csum "@sum(...)"
@sum('${1:key}') ${2:name};
endsnippet

snippet cunion "@union(...)"
@union('${1:key1}', '${2:key2}') ${3:name};
endsnippet

snippet cuniq "@uniq(...)"
@uniq('${1:key}') ${2:name};
endsnippet

snippet cuniqBy "@uniqBy(...)"
@uniqBy('${1:key}') ${2:name};
endsnippet

snippet bind "bind(...)"
bind(${1:this}, ${2:this.methodName});
endsnippet

snippet cancel "cancel(...)"
cancel('${1:key}');
endsnippet

snippet debounce "debounce(...)"
debounce(${1:this}, '${2:methodName}', ${3:500});
endsnippet

snippet later "later(...)"
later(${1:this}, () => {
	${2}
}, ${3:500});
endsnippet

snippet next "next(...)"
next(${1:this}, () => {
	${2}
});
endsnippet

snippet once "once(...)"
once(${1:this}, () => {
	${2}
});
endsnippet

snippet schedule "schedule(...)"
schedule('${1:queue}', ${2:this}, () => {
	${3},
});
endsnippet

snippet scheduleOnce "scheduleOnce(...)"
scheduleOnce('${1:queue}', ${2:this}, () => {
	${3}
});
endsnippet

snippet throttle "throttle(...)"
throttle(${1:this}, '${2:methodName}', ${3:500});
endsnippet

snippet model "Route: model(...) { ... }"
model(${1:params = \{\}}) {
	${2://body}
},
endsnippet

snippet setupController "setupController(...) { ... }"
setupController(controller, model) {
	super.setupController(controller, model);

	${1}
},
endsnippet

snippet beforeModel "Route: beforeModel(...) { ... }"
beforeModel(${1:transition}) {
	${1}
},
endsnippet

snippet afterModel "Route: afterModel(...) { ... }"
afterModel(${1:model, transition}) {
	${2}
},
endsnippet

snippet didReceiveAttrs "Component: didReceiveAttrs() { ... }"
didReceiveAttrs() {
	super.didReceiveAttrs(...arguments);

	${1}
},
endsnippet

snippet didRender "Component: didRender() { ... }"
didRender() {
	super.didRender(...arguments);

	${1}
},
endsnippet

snippet didUpdateAttrs "Component: didUpdateAttrs() { ... }"
didUpdateAttrs() {
	super.didUpdateAttrs(...arguments);

	${1}
},
endsnippet

snippet willUpdate "Component: willUpdate() { ... }"
willUpdate() {
	super.willUpdate(...arguments);

	${1}
},
endsnippet

snippet didInsertElement "Component: didInsertElement() { ... }"
didInsertElement() {
	super.didInsertElement(...arguments);

	${1}
},
endsnippet

snippet willDestroyElement "Component: willDestroyElement() { ... }"
willDestroyElement() {
	super.willDestroyElement(...arguments);

	${1}
},
endsnippet

snippet filterBy ".filterBy(...)"
${1:enumerable}.filterBy('${2:property}', ${3:value});
endsnippet

snippet mapBy ".mapBy(...)"
${1:enumerable}.mapBy('${2:property}');
endsnippet

snippet every ".every(...)"
${1:enumerable}.every(function(${2:item}) {
	${3}
});
endsnippet

snippet is-every ".isEvery(...)"
${1:enumerable}.isEvery('${2:property}', ${3:bool});
endsnippet

snippet is-any ".isAny(...)"
${1:enumerable}.isAny('${2:property}', ${3:bool});
endsnippet

snippet to-array ".toArray(...)"
${1:enumerable}.toArray();
endsnippet

snippet first-object ".get('firstObject')"
${1:enumerable}.get('firstObject');
endsnippet

snippet last-object ".get('lastObject')"
${1:enumerable}.get('lastObject');
endsnippet

